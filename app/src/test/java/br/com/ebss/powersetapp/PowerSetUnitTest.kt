package br.com.ebss.powersetapp

import org.junit.Assert.assertEquals
import org.junit.Test
import kotlin.math.pow
import kotlin.random.Random

class PowerSetUnitTest {
    @Test
    fun emptySet() {
        val initialSet = setOf<Int>()
        val resultSet = setOf(setOf<Int>())

        assertEquals(resultSet, initialSet.powerSet())
    }

    @Test
    fun smallSet() {
        val initialSet = setOf(1, 2)
        val resultSet = mutableSetOf<Set<Int>>()
        resultSet.add(setOf())
        resultSet.add(setOf(1))
        resultSet.add(setOf(2))
        resultSet.add(setOf(1, 2))

        assertEquals(resultSet, initialSet.powerSet())
    }

    @Test
    fun largeSet() {
        val initialSet = setOf(1, 2, 3, 4, 5, 6, 7)
        val resultSet = mutableSetOf<Set<Int>>()
        resultSet.add(setOf())
        resultSet.add(setOf(1))
        resultSet.add(setOf(2))
        resultSet.add(setOf(3))
        resultSet.add(setOf(4))
        resultSet.add(setOf(5))
        resultSet.add(setOf(6))
        resultSet.add(setOf(7))
        resultSet.add(setOf(1, 2))
        resultSet.add(setOf(1, 3))
        resultSet.add(setOf(1, 4))
        resultSet.add(setOf(1, 5))
        resultSet.add(setOf(1, 6))
        resultSet.add(setOf(1, 7))
        resultSet.add(setOf(2, 3))
        resultSet.add(setOf(2, 4))
        resultSet.add(setOf(2, 5))
        resultSet.add(setOf(2, 6))
        resultSet.add(setOf(2, 7))
        resultSet.add(setOf(3, 4))
        resultSet.add(setOf(3, 5))
        resultSet.add(setOf(3, 6))
        resultSet.add(setOf(3, 7))
        resultSet.add(setOf(4, 5))
        resultSet.add(setOf(4, 6))
        resultSet.add(setOf(4, 7))
        resultSet.add(setOf(5, 6))
        resultSet.add(setOf(5, 7))
        resultSet.add(setOf(6, 7))
        resultSet.add(setOf(1, 2, 3))
        resultSet.add(setOf(1, 2, 4))
        resultSet.add(setOf(1, 2, 5))
        resultSet.add(setOf(1, 2, 6))
        resultSet.add(setOf(1, 2, 7))
        resultSet.add(setOf(1, 3, 4))
        resultSet.add(setOf(1, 3, 5))
        resultSet.add(setOf(1, 3, 6))
        resultSet.add(setOf(1, 3, 7))
        resultSet.add(setOf(1, 4, 5))
        resultSet.add(setOf(1, 4, 6))
        resultSet.add(setOf(1, 4, 7))
        resultSet.add(setOf(1, 5, 6))
        resultSet.add(setOf(1, 5, 7))
        resultSet.add(setOf(1, 6, 7))
        resultSet.add(setOf(2, 3, 4))
        resultSet.add(setOf(2, 3, 5))
        resultSet.add(setOf(2, 3, 6))
        resultSet.add(setOf(2, 3, 7))
        resultSet.add(setOf(2, 4, 5))
        resultSet.add(setOf(2, 4, 6))
        resultSet.add(setOf(2, 4, 7))
        resultSet.add(setOf(2, 5, 6))
        resultSet.add(setOf(2, 5, 7))
        resultSet.add(setOf(2, 6, 7))
        resultSet.add(setOf(3, 4, 5))
        resultSet.add(setOf(3, 4, 6))
        resultSet.add(setOf(3, 4, 7))
        resultSet.add(setOf(3, 5, 6))
        resultSet.add(setOf(3, 5, 7))
        resultSet.add(setOf(3, 6, 7))
        resultSet.add(setOf(4, 5, 6))
        resultSet.add(setOf(4, 5, 7))
        resultSet.add(setOf(4, 6, 7))
        resultSet.add(setOf(5, 6, 7))
        resultSet.add(setOf(1, 2, 3, 4))
        resultSet.add(setOf(1, 2, 3, 5))
        resultSet.add(setOf(1, 2, 3, 6))
        resultSet.add(setOf(1, 2, 3, 7))
        resultSet.add(setOf(1, 2, 4, 5))
        resultSet.add(setOf(1, 2, 4, 6))
        resultSet.add(setOf(1, 2, 4, 7))
        resultSet.add(setOf(1, 2, 5, 6))
        resultSet.add(setOf(1, 2, 5, 7))
        resultSet.add(setOf(1, 2, 6, 7))
        resultSet.add(setOf(1, 3, 4, 5))
        resultSet.add(setOf(1, 3, 4, 6))
        resultSet.add(setOf(1, 3, 4, 7))
        resultSet.add(setOf(1, 3, 5, 6))
        resultSet.add(setOf(1, 3, 5, 7))
        resultSet.add(setOf(1, 3, 6, 7))
        resultSet.add(setOf(1, 4, 5, 6))
        resultSet.add(setOf(1, 4, 5, 7))
        resultSet.add(setOf(1, 4, 6, 7))
        resultSet.add(setOf(1, 5, 6, 7))
        resultSet.add(setOf(2, 3, 4, 5))
        resultSet.add(setOf(2, 3, 4, 6))
        resultSet.add(setOf(2, 3, 4, 7))
        resultSet.add(setOf(2, 3, 5, 6))
        resultSet.add(setOf(2, 3, 5, 7))
        resultSet.add(setOf(2, 3, 6, 7))
        resultSet.add(setOf(2, 4, 5, 6))
        resultSet.add(setOf(2, 4, 5, 7))
        resultSet.add(setOf(2, 4, 6, 7))
        resultSet.add(setOf(2, 5, 6, 7))
        resultSet.add(setOf(3, 4, 5, 6))
        resultSet.add(setOf(3, 4, 5, 7))
        resultSet.add(setOf(3, 4, 6, 7))
        resultSet.add(setOf(3, 5, 6, 7))
        resultSet.add(setOf(4, 5, 6, 7))
        resultSet.add(setOf(1, 2, 3, 4, 5))
        resultSet.add(setOf(1, 2, 3, 4, 6))
        resultSet.add(setOf(1, 2, 3, 4, 7))
        resultSet.add(setOf(1, 2, 3, 5, 6))
        resultSet.add(setOf(1, 2, 3, 5, 7))
        resultSet.add(setOf(1, 2, 3, 6, 7))
        resultSet.add(setOf(1, 2, 4, 5, 6))
        resultSet.add(setOf(1, 2, 4, 5, 7))
        resultSet.add(setOf(1, 2, 4, 6, 7))
        resultSet.add(setOf(1, 2, 5, 6, 7))
        resultSet.add(setOf(1, 3, 4, 5, 6))
        resultSet.add(setOf(1, 3, 4, 5, 7))
        resultSet.add(setOf(1, 3, 4, 6, 7))
        resultSet.add(setOf(1, 3, 5, 6, 7))
        resultSet.add(setOf(1, 4, 5, 6, 7))
        resultSet.add(setOf(2, 3, 4, 5, 6))
        resultSet.add(setOf(2, 3, 4, 5, 7))
        resultSet.add(setOf(2, 3, 4, 6, 7))
        resultSet.add(setOf(2, 3, 5, 6, 7))
        resultSet.add(setOf(2, 4, 5, 6, 7))
        resultSet.add(setOf(3, 4, 5, 6, 7))
        resultSet.add(setOf(1, 2, 3, 4, 5, 6))
        resultSet.add(setOf(1, 2, 3, 4, 5, 7))
        resultSet.add(setOf(1, 2, 3, 4, 6, 7))
        resultSet.add(setOf(1, 2, 3, 5, 6, 7))
        resultSet.add(setOf(1, 2, 4, 5, 6, 7))
        resultSet.add(setOf(1, 3, 4, 5, 6, 7))
        resultSet.add(setOf(2, 3, 4, 5, 6, 7))
        resultSet.add(setOf(1, 2, 3, 4, 5, 6, 7))

        assertEquals(resultSet, initialSet.powerSet())
    }

    @Test
    fun powerSetSize() {
        val elements = Random.nextInt(8, 15)
        val initialSet = mutableSetOf<Int>()
        for (i in 1..elements) {
            initialSet.add(i)
        }
        val powerSetSize = 2.0.pow(elements).toInt()

        assertEquals(powerSetSize, initialSet.powerSet().size)
    }
}